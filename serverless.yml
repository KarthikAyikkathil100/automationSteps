service: Automation
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage}
  versionFunctions: false

package:
  individually: true
  patterns:
    - '!controllers/**'
    - '!layers/**'


custom:
  ACCOUNT_ID: !Ref AWS::AccountId
  REGION: !Ref AWS::Region
  STAGE: ${self:provider.stage}
  APPLICATION: 'Automation'
  ROUTE_TABLE: 'Routes'
  BUCKET: 'media.demo.test'
  ROLES: 
    TESTROLE: ${ssm:/automation/testrole/role}

layers:
  UtilsLayer:
    path: './layers/utils/'
    name: ${self:custom.STAGE}-UtilsLayer


resources:
  Resources:
    RouteSubmitForAutomationRoleRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.STAGE}-RouteSubmitForAutomationRole
        AssumeRolePolicyDocument: # This is a required property, this defines to what or whom this role can be applied
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: # This defines the resource/service/user..etc to which the role can be applied
                  - lambda.amazonaws.com # Here, this role can be assigned to any of the lambdas function
              Action:
                - sts:AssumeRole # This action can be taken by the above mentioned resource/service/user. (sts:AssumeRole means the person in Principal can assume this role, in our case we are giving power to all lambda function to assume this role, if role got assigned to a lambda fn)
    AutomateQueue:
        Type: AWS::SQS::Queue
        Properties:
          QueueName:
            Fn::Sub:
              - ${STAGE}-AutomateQueue
              - STAGE: ${self:custom.STAGE}
          VisibilityTimeout: 300
    StateMachineExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - states.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: StateMachineExecutionPolicy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - lambda:InvokeFunction
                  Resource: "*"
    # MyNewStepFunction:
    #   Type: AWS::StepFunctions::StateMachine
    #   Properties:
    #     Definition:
    #       Comment: 'A state machine for text blur'
    #       StartAt: 'Step1'
    #       States:
    #         Step1:
    #           Type: 'Task'
    #           Resource: 
    #             Fn::Sub: 
    #               - arn:aws:lambda:${REGION}:${ACCOUNT_ID}:function:dev-RouteSubmitForAutomation
    #               - REGION: ${self:custom.REGION}
    #                 ACCOUNT_ID: ${self:custom.ACCOUNT_ID}
    #           Catch:
    #             - ErrorEquals:
    #                 - States.ALL
    #               Next: ErrorHandleFN
    #           Next: StatusCheck
    #         StatusCheck:
    #           Type: 'Task'
    #           Resource: 
    #             Fn::Sub: 
    #               - arn:aws:lambda:${REGION}:${ACCOUNT_ID}:function:dev-CheckVideoIntelligenceStatus
    #               - REGION: ${self:custom.REGION}
    #                 ACCOUNT_ID: ${self:custom.ACCOUNT_ID}
    #           Catch:
    #             - ErrorEquals:
    #                 - States.ALL
    #               Next: ErrorHandleFN
    #           Next: CheckStatusStep
    #         WaitStep:
    #           Type: 'Wait'
    #           Seconds: 10
    #           Next: StatusCheck
    #         CheckStatusStep:
    #           Type: 'Choice'
    #           Choices:
    #             - Variable: $.status
    #               BooleanEquals: true
    #               Next: ProcessResultsStep
    #           Default: WaitStep
    #         ProcessResultsStep:
    #           Type: 'Task'
    #           Resource: 
    #             Fn::Sub: 
    #               - arn:aws:lambda:${REGION}:${ACCOUNT_ID}:function:dev-ProcessResultsFunction
    #               - REGION: ${self:custom.REGION}
    #                 ACCOUNT_ID: ${self:custom.ACCOUNT_ID}
    #           Catch:
    #             - ErrorEquals:
    #                 - States.ALL
    #               Next: ErrorHandleFN
    #           Next: SubmitBlurRequestStep
    #         WaitStepForBlurReq:
    #           Type: 'Wait'
    #           Seconds: 10
    #           Next: SubmitBlurRequestStep
    #         SubmitBlurRequestStep:
    #           Type: 'Task'
    #           Resource: 
    #             Fn::Sub: 
    #               - arn:aws:lambda:${REGION}:${ACCOUNT_ID}:function:dev-StartTxtBlurFunction
    #               - REGION: ${self:custom.REGION}
    #                 ACCOUNT_ID: ${self:custom.ACCOUNT_ID}
    #           Catch:
    #             - ErrorEquals:
    #                 - States.ALL
    #               Next: ErrorHandleFN
    #           Next: CheckReqStatusStep
    #         CheckReqStatusStep:
    #           Type: 'Choice'
    #           Choices:
    #             - Variable: $.submitted
    #               BooleanEquals: true
    #               Next: Success
    #           Default: WaitStepForBlurReq
    #         Success:
    #           Type: 'Pass'
    #           End: true
    #         ErrorHandleFN:
    #           Type: 'Pass'
    #           End: true
    #     RoleArn: !GetAtt StateMachineExecutionRole.Arn
    AutomationStepFunction:
      Type: AWS::StepFunctions::StateMachine
      Properties:
        Definition:
          Comment: 'Automation Flow'
          StartAt: 'InitialChoice'
          States:
            InitialChoice:
              Type: 'Choice'
              Choices:
                - Variable: $.text_blur
                  BooleanEquals: true
                  Next: Step1
                - And:
                  - Variable: $.text_blur
                    BooleanEquals: false
                  - Variable: $.face_blur
                    BooleanEquals: true
                  Next: FaceBlurReqSubmitStep
                - And:
                  - Variable: $.text_blur
                    BooleanEquals: false
                  - Variable: $.face_blur
                    BooleanEquals: false
                  - Variable: $.direction_detection
                    BooleanEquals: false
                  Next: DirectionDetectionReqSubmitStep
            Step1:
              Type: 'Task'
              Resource: 
                Fn::Sub: 
                  - arn:aws:lambda:${REGION}:${ACCOUNT_ID}:function:dev-RouteSubmitForAutomation
                  - REGION: ${self:custom.REGION}
                    ACCOUNT_ID: ${self:custom.ACCOUNT_ID}
              Catch:
                - ErrorEquals:
                    - States.ALL
                  Next: ErrorHandleFN
              Next: StatusCheck
              ResultPath: '$.google_info'
            StatusCheck:
              Type: 'Task'
              Resource: 
                Fn::Sub: 
                  - arn:aws:lambda:${REGION}:${ACCOUNT_ID}:function:dev-CheckVideoIntelligenceStatus
                  - REGION: ${self:custom.REGION}
                    ACCOUNT_ID: ${self:custom.ACCOUNT_ID}
              Catch:
                - ErrorEquals:
                    - States.ALL
                  Next: ErrorHandleFN
              Next: CheckStatusStep
              ResultPath: '$.google_status'
            WaitStep:
              Type: 'Wait'
              Seconds: 10
              Next: StatusCheck
            CheckStatusStep:
              Type: 'Choice'
              Choices:
                - Variable: $.google_status.status
                  BooleanEquals: true
                  Next: ProcessResultsStep
              Default: WaitStep
            ProcessResultsStep:
              Type: 'Task'
              Resource: 
                Fn::Sub: 
                  - arn:aws:lambda:${REGION}:${ACCOUNT_ID}:function:dev-ProcessResultsFunction
                  - REGION: ${self:custom.REGION}
                    ACCOUNT_ID: ${self:custom.ACCOUNT_ID}
              Catch:
                - ErrorEquals:
                    - States.ALL
                  Next: ErrorHandleFN
              Next: SubmitBlurRequestStep
              ResultPath: '$.upload_res'
            WaitStepForBlurReq:
              Type: 'Wait'
              Seconds: 10
              Next: SubmitBlurRequestStep
            SubmitBlurRequestStep:
              Type: 'Task'
              Resource: 
                Fn::Sub: 
                  - arn:aws:lambda:${REGION}:${ACCOUNT_ID}:function:dev-StartTxtBlurFunction
                  - REGION: ${self:custom.REGION}
                    ACCOUNT_ID: ${self:custom.ACCOUNT_ID}
              Catch:
                - ErrorEquals:
                    - States.ALL
                  Next: ErrorHandleFN
              Next: CheckReqStatusStep
              ResultPath: '$.res'
            CheckReqStatusStep:
              Type: 'Choice'
              Choices:
                - Variable: $.res.submitted
                  BooleanEquals: true
                  Next: FetchTxtBlurStatusStep
              Default: WaitStepForBlurReq
            FetchTxtBlurStatusStep:
              Type: 'Task'
              Resource:
                Fn::Sub: 
                  - arn:aws:lambda:${REGION}:${ACCOUNT_ID}:function:dev-FetchTxtBlurStatus
                  - REGION: ${self:custom.REGION}
                    ACCOUNT_ID: ${self:custom.ACCOUNT_ID}
              Catch:
                - ErrorEquals:
                    - States.ALL
                  Next: ErrorHandleFN
              Next: CheckTxtBlurStatusStep
              ResultPath: '$.blur_status'
            CheckTxtBlurStatusStep:
              Type: 'Choice'
              Choices:
                - And:
                  - Variable: $.blur_status.done
                    BooleanEquals: true
                  - Variable: $.blur_status.error
                    BooleanEquals: false
                  Next: IfFaceBlurStep
                - Variable: $.blur_status.error
                  BooleanEquals: true
                  Next: ErrorHandleFN
              Default: WaitForTxtBlurStep
            IfFaceBlurStep:
              Type: 'Choice'
              Choices:
                - Variable: $.face_blur
                  BooleanEquals: true
                  Next: FaceBlurReqSubmitStep
              Default: Success
            WaitForTxtBlurStep:
              Type: 'Wait'
              Seconds: 10
              Next: FetchTxtBlurStatusStep
            FaceBlurReqSubmitStep:
              Type: 'Task'
              Resource:
                Fn::Sub: 
                  - arn:aws:lambda:${REGION}:${ACCOUNT_ID}:function:dev-FaceBlurReqSubmitFunction
                  - REGION: ${self:custom.REGION}
                    ACCOUNT_ID: ${self:custom.ACCOUNT_ID}
              Catch:
                - ErrorEquals:
                    - States.ALL
                  Next: ErrorHandleFN
              Next: CheckFaceBlurReqStatusStep
              ResultPath: '$.face_blur_submit'
            CheckFaceBlurReqStatusStep:
              Type: 'Choice'
              Choices:
                - Variable: $.face_blur_submit.submitted
                  BooleanEquals: true
                  Next: FetchFaceBlurStatusStep
              Default: WaitFaceBlurSubmitStep
            WaitFaceBlurSubmitStep:
              Type: 'Wait'
              Seconds: 10
              Next: FaceBlurReqSubmitStep
            FetchFaceBlurStatusStep:
              Type: 'Task'
              Resource:
                Fn::Sub: 
                  - arn:aws:lambda:${REGION}:${ACCOUNT_ID}:function:dev-FetchFaceBlurStatusFunction
                  - REGION: ${self:custom.REGION}
                    ACCOUNT_ID: ${self:custom.ACCOUNT_ID}
              Catch:
                - ErrorEquals:
                    - States.ALL
                  Next: ErrorHandleFN
              Next: CheckFaceBlurStatusStep
              ResultPath: '$.face_blur_status'
            CheckFaceBlurStatusStep:
              Type: 'Choice'
              Choices:
                - And:
                  - Variable: $.face_blur_status.done
                    BooleanEquals: true
                  - Variable: $.face_blur_status.error
                    BooleanEquals: false
                  Next: IfDirectionDetectionStep
                - Variable: $.face_blur_status.error
                  BooleanEquals: true
                  Next: ErrorHandleFN
              Default: WaitFaceBlurCompleteStatusStep
            IfDirectionDetectionStep:
              Type: 'Choice'
              Choices:
                - Variable: $.direction_detection
                  BooleanEquals: true
                  Next: DirectionDetectionReqSubmitStep
              Default: Success
            DirectionDetectionReqSubmitStep:
              Type: 'Task'
              Resource:
                Fn::Sub: 
                  - arn:aws:lambda:${REGION}:${ACCOUNT_ID}:function:dev-DirectionDetectionReqSubmitFunction
                  - REGION: ${self:custom.REGION}
                    ACCOUNT_ID: ${self:custom.ACCOUNT_ID}
              Catch:
                - ErrorEquals:
                    - States.ALL
                  Next: ErrorHandleFN
              Next: CheckDirectionDetectionReqStatusStep
              ResultPath: '$.direction_detection_req'
            CheckDirectionDetectionReqStatusStep:
              Type: 'Choice'
              Choices:
                - Variable: $.direction_detection_req.submitted
                  BooleanEquals: true
                  Next: FetchDirectionDetectionStatusStep
              Default: WaitDirectionDetectionSubmitStep
            WaitDirectionDetectionSubmitStep:
              Type: 'Wait'
              Seconds: 10
              Next: DirectionDetectionReqSubmitStep
            FetchDirectionDetectionStatusStep:
              Type: 'Task'
              Resource:
                Fn::Sub: 
                  - arn:aws:lambda:${REGION}:${ACCOUNT_ID}:function:dev-FetchDirectionDetectionStatusFunction
                  - REGION: ${self:custom.REGION}
                    ACCOUNT_ID: ${self:custom.ACCOUNT_ID}
              Catch:
                - ErrorEquals:
                    - States.ALL
                  Next: ErrorHandleFN
              Next: CheckDirectionDetectionStatusStep
              ResultPath: '$.direction_detection_step'
            CheckDirectionDetectionStatusStep:
              Type: 'Choice'
              Choices:
                - And:
                  - Variable: $.direction_detection_step.done
                    BooleanEquals: true
                  - Variable: $.direction_detection_step.error
                    BooleanEquals: false
                  Next: Success
                - Variable: $.direction_detection_step.error
                  BooleanEquals: true
                  Next: ErrorHandleFN
              Default: WaitDirectionDetectionCompleteStatusStep
            WaitDirectionDetectionCompleteStatusStep:
              Type: 'Wait'
              Seconds: 10
              Next: FetchDirectionDetectionStatusStep
            WaitFaceBlurCompleteStatusStep:
              Type: 'Wait'
              Seconds: 10
              Next: FetchFaceBlurStatusStep
            Success:
              Type: 'Pass'
              End: true
            ErrorHandleFN:
              Type: 'Pass'
              End: true
        RoleArn: !GetAtt StateMachineExecutionRole.Arn

functions:
  # Submit route for automation
  RouteSubmitForAutomation:
    name: ${self:custom.STAGE}-RouteSubmitForAutomation
    runtime: nodejs18.x
    handler: './controllers/start_automation.handler'
    role: 
      Fn::Sub:
        - ${ARN}
        - ARN: ${self:custom.ROLES.TESTROLE}
    package:
      patterns:
        - 'controllers/**'
        - 'layers/**'
        - 'services/*'
        - '!layers/utils/nodejs/node18/node_modules/@AwsHelpers/node_modules/**'
        - '!layers/utils/nodejs/node18/node_modules/@Helpers/node_modules/**'
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - AutomateQueue
              - Arn
          batchSize: 5
          maximumBatchingWindow: 15
    environment:
      Stage: ${self:custom.STAGE}
      Region: ${self:custom.REGION}
      Application: ${self:custom.APPLICATION}
    layers:
      - !Ref UtilsLayerLambdaLayer # The name is `${layerName}LambdaLayer`, the string "LambdaLayer" has to be appended as per docs
  CheckVideoIntelligenceStatus:
    name: ${self:custom.STAGE}-CheckVideoIntelligenceStatus
    runtime: nodejs18.x
    handler: './controllers/check_job_status.handler'
    role: 
      Fn::Sub:
        - ${ARN}
        - ARN: ${self:custom.ROLES.TESTROLE}
    package:
      patterns:
        - 'controllers/**'
        - 'layers/**'
        - 'services/*'
        - '!layers/utils/nodejs/node18/node_modules/@AwsHelpers/node_modules/**'
        - '!layers/utils/nodejs/node18/node_modules/@Helpers/node_modules/**'
    events:
      - http:
          path: '/check-status'
          method: 'post'
          cors: true
    environment:
      Stage: ${self:custom.STAGE}
      Region: ${self:custom.REGION}
      Application: ${self:custom.APPLICATION}
    layers:
      - !Ref UtilsLayerLambdaLayer 
  ProcessResultsFunction:
    name: ${self:custom.STAGE}-ProcessResultsFunction
    runtime: nodejs18.x
    handler: './controllers/upload_results.handler'
    role: 
      Fn::Sub:
        - ${ARN}
        - ARN: ${self:custom.ROLES.TESTROLE}
    package:
      patterns:
        - 'controllers/**'
        - 'layers/**'
        - 'services/*'
        - '!layers/utils/nodejs/node18/node_modules/@AwsHelpers/node_modules/**'
        - '!layers/utils/nodejs/node18/node_modules/@Helpers/node_modules/**'
    events:
      - http:
          path: '/process-results'
          method: 'post'
          cors: true
    environment:
      Stage: ${self:custom.STAGE}
      Region: ${self:custom.REGION}
      Application: ${self:custom.APPLICATION}
    layers:
      - !Ref UtilsLayerLambdaLayer 
  StartTxtBlurFunction:
    name: ${self:custom.STAGE}-StartTxtBlurFunction
    runtime: nodejs18.x
    handler: './controllers/start_blur_process.handler'
    role: 
      Fn::Sub:
        - ${ARN}
        - ARN: ${self:custom.ROLES.TESTROLE}
    package:
      patterns:
        - 'controllers/**'
        - 'layers/**'
        - 'services/*'
        - '!layers/utils/nodejs/node18/node_modules/@AwsHelpers/node_modules/**'
        - '!layers/utils/nodejs/node18/node_modules/@Helpers/node_modules/**'
    events:
      - http:
          path: '/start-blur'
          method: 'post'
          cors: true
    environment:
      Stage: ${self:custom.STAGE}
      Region: ${self:custom.REGION}
      Application: ${self:custom.APPLICATION}
    layers:
      - !Ref UtilsLayerLambdaLayer 
  FetchTxtBlurStatus:
    name: ${self:custom.STAGE}-FetchTxtBlurStatus
    runtime: nodejs18.x
    handler: './controllers/fetch_blur_status.handler'
    role: 
      Fn::Sub:
        - ${ARN}
        - ARN: ${self:custom.ROLES.TESTROLE}
    package:
      patterns:
        - 'controllers/**'
        - 'layers/**'
        - 'services/*'
        - '!layers/utils/nodejs/node18/node_modules/@AwsHelpers/node_modules/**'
        - '!layers/utils/nodejs/node18/node_modules/@Helpers/node_modules/**'
    events:
      - http:
          path: '/start-blur'
          method: 'post'
          cors: true
    environment:
      Stage: ${self:custom.STAGE}
      Region: ${self:custom.REGION}
      Application: ${self:custom.APPLICATION}
    layers:
      - !Ref UtilsLayerLambdaLayer 
  FetchFaceBlurStatusFunction:
    name: ${self:custom.STAGE}-FetchFaceBlurStatusFunction
    runtime: nodejs18.x
    handler: './controllers/face_blur_status.handler'
    role: 
      Fn::Sub:
        - ${ARN}
        - ARN: ${self:custom.ROLES.TESTROLE}
    package:
      patterns:
        - 'controllers/**'
        - 'layers/**'
        - 'services/*'
        - '!layers/utils/nodejs/node18/node_modules/@AwsHelpers/node_modules/**'
        - '!layers/utils/nodejs/node18/node_modules/@Helpers/node_modules/**'
    events:
      - http:
          path: '/face-blur-status'
          method: 'post'
          cors: true
    environment:
      Stage: ${self:custom.STAGE}
      Region: ${self:custom.REGION}
      Application: ${self:custom.APPLICATION}
    layers:
      - !Ref UtilsLayerLambdaLayer 
  FaceBlurReqSubmitFunction:
    name: ${self:custom.STAGE}-FaceBlurReqSubmitFunction
    runtime: nodejs18.x
    handler: './controllers/face_blur_submit.handler'
    role: 
      Fn::Sub:
        - ${ARN}
        - ARN: ${self:custom.ROLES.TESTROLE}
    package:
      patterns:
        - 'controllers/**'
        - 'layers/**'
        - 'services/*'
        - '!layers/utils/nodejs/node18/node_modules/@AwsHelpers/node_modules/**'
        - '!layers/utils/nodejs/node18/node_modules/@Helpers/node_modules/**'
    events:
      - http:
          path: '/start-blur'
          method: 'post'
          cors: true
    environment:
      Stage: ${self:custom.STAGE}
      Region: ${self:custom.REGION}
      Application: ${self:custom.APPLICATION}
    layers:
      - !Ref UtilsLayerLambdaLayer
  DirectionDetectionReqSubmitFunction:
    name: ${self:custom.STAGE}-DirectionDetectionReqSubmitFunction
    runtime: nodejs18.x
    handler: './controllers/direction_detection_submit.handler'
    role: 
      Fn::Sub:
        - ${ARN}
        - ARN: ${self:custom.ROLES.TESTROLE}
    package:
      patterns:
        - 'controllers/**'
        - 'layers/**'
        - 'services/*'
        - '!layers/utils/nodejs/node18/node_modules/@AwsHelpers/node_modules/**'
        - '!layers/utils/nodejs/node18/node_modules/@Helpers/node_modules/**'
    events:
      - http:
          path: '/direction-detection'
          method: 'post'
          cors: true
    environment:
      Stage: ${self:custom.STAGE}
      Region: ${self:custom.REGION}
      Application: ${self:custom.APPLICATION}
    layers:
      - !Ref UtilsLayerLambdaLayer
  FetchDirectionDetectionStatusFunction:
    name: ${self:custom.STAGE}-FetchDirectionDetectionStatusFunction
    runtime: nodejs18.x
    handler: './controllers/direction_detection_status.handler'
    role: 
      Fn::Sub:
        - ${ARN}
        - ARN: ${self:custom.ROLES.TESTROLE}
    package:
      patterns:
        - 'controllers/**'
        - 'layers/**'
        - 'services/*'
        - '!layers/utils/nodejs/node18/node_modules/@AwsHelpers/node_modules/**'
        - '!layers/utils/nodejs/node18/node_modules/@Helpers/node_modules/**'
    events:
      - http:
          path: '/direction-detection-status'
          method: 'post'
          cors: true
    environment:
      Stage: ${self:custom.STAGE}
      Region: ${self:custom.REGION}
      Application: ${self:custom.APPLICATION}
    layers:
      - !Ref UtilsLayerLambdaLayer