service: Automation
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: ${opt:stage}
  versionFunctions: false

package:
  individually: true
  patterns:
    - '!controllers/**'
    - '!layers/**'


custom:
  ACCOUNT_ID: !Ref AWS::AccountId
  REGION: !Ref AWS::Region
  STAGE: ${self:provider.stage}
  APPLICATION: 'Automation'
  ROUTE_TABLE: 'Routes'
  BUCKET: 'media.demo.test'
  ROLES: 
    TESTROLE: ${ssm:/automation/testrole/role}

layers:
  UtilsLayer:
    path: './layers/utils/'
    name: ${self:custom.STAGE}-UtilsLayer


resources:
  Resources:
    RouteSubmitForAutomationRoleRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.STAGE}-RouteSubmitForAutomationRole
        AssumeRolePolicyDocument: # This is a required property, this defines to what or whom this role can be applied
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service: # This defines the resource/service/user..etc to which the role can be applied
                  - lambda.amazonaws.com # Here, this role can be assigned to any of the lambdas function
              Action:
                - sts:AssumeRole # This action can be taken by the above mentioned resource/service/user. (sts:AssumeRole means the person in Principal can assume this role, in our case we are giving power to all lambda function to assume this role, if role got assigned to a lambda fn)
    AutomateQueue:
        Type: AWS::SQS::Queue
        Properties:
          QueueName:
            Fn::Sub:
              - ${STAGE}-AutomateQueue
              - STAGE: ${self:custom.STAGE}
          VisibilityTimeout: 300



functions:
  # Submit route for automation
  RouteSubmitForAutomation:
    name: ${self:custom.STAGE}-RouteSubmitForAutomation
    runtime: nodejs18.x
    handler: './controllers/start_automation.handler'
    role: 
      Fn::Sub:
        - ${ARN}
        - ARN: ${self:custom.ROLES.TESTROLE}
    package:
      patterns:
        - 'controllers/**'
        - 'layers/**'
        - 'services/*'
        - '!layers/utils/nodejs/node18/node_modules/@AwsHelpers/node_modules/**'
        - '!layers/utils/nodejs/node18/node_modules/@Helpers/node_modules/**'
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - AutomateQueue
              - Arn
          batchSize: 5
          maximumBatchingWindow: 15
    environment:
      Stage: ${self:custom.STAGE}
      Region: ${self:custom.REGION}
      Application: ${self:custom.APPLICATION}
    layers:
      - !Ref UtilsLayerLambdaLayer # The name is `${layerName}LambdaLayer`, the string "LambdaLayer" has to be appended as per docs